---
// Import necessary components
import DarkModeToggle from './DarkModeToggle.svelte';

// Define navigation items
const navItems = [
  { path: '/', label: 'Home' },
  { path: '/blog', label: 'Blog' },
  { path: '/photography', label: 'Photography' },
  { path: '/about', label: 'About' },
  { path: '/contact', label: 'Contact' }
];

// Get current path for highlighting active link
const pathname = Astro.url.pathname;
---

<header id="main-header" class="fixed top-0 left-0 right-0 z-50 transform -translate-y-full opacity-0 transition-all duration-300 ease-in-out pointer-events-none">
  <div class="max-w-5xl mx-auto px-4 pt-6">
    <nav class="flex items-center justify-between p-3 backdrop-blur-xl bg-white/80 dark:bg-[#1d1d1f]/80 rounded-2xl shadow-lg border border-[#e5e5e5]/50 dark:border-[#333336]/50 transition-all duration-300 pointer-events-auto">
      <!-- Left section: Profile image and name -->
      <div class="flex items-center space-x-3">
        <!-- Mobile menu button (only visible on small screens) -->
        <button id="menu-toggle" class="md:hidden p-2 text-[#86868b] dark:text-[#a1a1a6] rounded-full hover:bg-[#f5f5f7] dark:hover:bg-[#2d2d2f] transition-all duration-200">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M4 6h16M4 12h16M4 18h16" />
          </svg>
        </button>
        
        <!-- Profile image (always visible) -->
        <a href="/" class="flex-shrink-0">
          <img src="/assets/images/profile.jpg" alt="Adrian Diaz Espinoza" class="w-10 h-10 rounded-full object-cover border-0 border-white dark:border-[#333336]">
        </a>
        
        <!-- Name (hidden on mobile) -->
        <div class="hidden sm:block font-semibold text-m tracking-tight text-[#1d1d1f] dark:text-white transition-colors">
          <a href="/" class="hover:opacity-80 transition-opacity">Adrian Diaz Espinoza</a>
        </div>
      </div>
      
      <!-- Center section: Navigation links (desktop only) -->
      <ul class="hidden md:flex md:space-x-6 items-center" aria-label="Main navigation">
        {navItems.map(({ path, label }) => (
          <li>
            <a 
              href={path} 
              class={`relative block py-2 px-3 transition-all duration-200 ${
                pathname === path 
                  ? 'text-[#0071e3] font-medium' 
                  : 'text-[#424245] dark:text-[#a1a1a6] hover:text-[#0071e3] dark:hover:text-white'
              }`}
            >
              {label}
              {pathname === path && (
                <span class="absolute bottom-0 left-1/2 transform -translate-x-1/2 w-12 h-[2px] bg-[#0071e3] rounded-full"></span>
              )}
            </a>
          </li>
        ))}
        
        <!-- More options button (three dots) -->
        <li>
          <button id="more-options" class="p-2 text-[#86868b] dark:text-[#a1a1a6] rounded-full hover:bg-[#f5f5f7] dark:hover:bg-[#2d2d2f] transition-all duration-200">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 12h.01M12 12h.01M19 12h.01M6 12a1 1 0 11-2 0 1 1 0 012 0zm7 0a1 1 0 11-2 0 1 1 0 012 0zm7 0a1 1 0 11-2 0 1 1 0 012 0z" />
            </svg>
          </button>
        </li>
      </ul>
      
      <!-- Right section: Dark mode toggle and search -->
      <div class="flex items-center space-x-2">
        <!-- Dark mode toggle button goes here -->
         
        <!-- Search button -->
        <button id="search-toggle" class="p-2 text-[#86868b] dark:text-[#a1a1a6] rounded-full hover:bg-[#f5f5f7] dark:hover:bg-[#2d2d2f] transition-all duration-200">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
          </svg>
        </button>
      </div>
    </nav>
  </div>
  
  <!-- Mobile navigation menu (hidden by default) -->
  <div id="mobile-menu" class="md:hidden hidden mx-4 mt-2 bg-white/95 dark:bg-[#1d1d1f]/95 shadow-lg transition-all duration-300 z-20 backdrop-blur-xl rounded-2xl border border-[#e5e5e5]/50 dark:border-[#333336]/50 pointer-events-auto">
    <ul class="p-4 space-y-3">
      {navItems.map(({ path, label }) => (
        <li>
          <a 
            href={path} 
            class={`block py-3 px-4 rounded-lg transition-all duration-200 ${
              pathname === path 
                ? 'bg-[#f5f5f7] dark:bg-[#2d2d2f] text-[#0071e3] font-medium' 
                : 'text-[#424245] dark:text-[#a1a1a6] hover:bg-[#f5f5f7] dark:hover:bg-[#2d2d2f]'
            }`}
          >
            {label}
          </a>
        </li>
      ))}
    </ul>
  </div>
</header>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const header = document.getElementById('main-header');
    const menuToggle = document.getElementById('menu-toggle');
    const mobileMenu = document.getElementById('mobile-menu');
    const searchToggle = document.getElementById('search-toggle');
    const moreOptions = document.getElementById('more-options');
    
    if (!header || !menuToggle || !mobileMenu) return;
    
    // Show header when scrolling down past hero section
    let lastScrollY = 0;
    const scrollThreshold = 300; // Adjust based on your hero section height
    
    window.addEventListener('scroll', () => {
      const currentScrollY = window.scrollY;
      
      if (currentScrollY > scrollThreshold) {
        // Show header when scrolled past threshold
        header.classList.remove('-translate-y-full', 'opacity-0');
        header.classList.add('translate-y-0', 'opacity-100');
      } else {
        // Hide header when at top of page
        header.classList.remove('translate-y-0', 'opacity-100');
        header.classList.add('-translate-y-full', 'opacity-0');
      }
      
      lastScrollY = currentScrollY;
    });
    
    // Toggle mobile menu
    menuToggle.addEventListener('click', () => {
      mobileMenu.classList.toggle('hidden');
      
      // Add animation classes
      if (!mobileMenu.classList.contains('hidden')) {
        mobileMenu.style.opacity = '0';
        mobileMenu.style.transform = 'translateY(-10px)';
        
        // Force a reflow
        void mobileMenu.offsetWidth;
        
        // Apply transitions
        mobileMenu.style.opacity = '1';
        mobileMenu.style.transform = 'translateY(0)';
      }
    });
    
    // Close menu when clicking outside
    document.addEventListener('click', (event) => {
      if (!mobileMenu.classList.contains('hidden') && 
          !mobileMenu.contains(event.target as Node) && 
          !menuToggle.contains(event.target as Node)) {
        mobileMenu.classList.add('hidden');
      }
    });
    
    // Search functionality (placeholder)
    if (searchToggle) {
      searchToggle.addEventListener('click', () => {
        // Implement search functionality or open search modal
        console.log('Search clicked');
      });
    }
    
    // More options functionality (placeholder)
    if (moreOptions) {
      moreOptions.addEventListener('click', () => {
        // Implement more options dropdown
        console.log('More options clicked');
      });
    }
    
    // Handle window resize
    window.addEventListener('resize', () => {
      if (window.innerWidth >= 768) {
        mobileMenu.classList.add('hidden');
      }
    });
  });
</script>

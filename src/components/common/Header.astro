---
// Import necessary components
import DarkModeToggle from './DarkModeToggle.svelte';

// Define navigation items
const navItems = [
  { path: '/', label: 'Home' },
  { path: '/blog', label: 'Blog' },
  { path: '/photography', label: 'Photography' },
  { path: '/about', label: 'About' },
  { path: '/contact', label: 'Contact' }
];

// Get current path for highlighting active link
const pathname = Astro.url.pathname;
---

<header class="sticky top-0 z-50 backdrop-blur-xl bg-white/90 dark:bg-[#1d1d1f]/90 border-b border-[#e5e5e5] dark:border-[#333336] transition-all duration-300">
  <nav class="flex flex-wrap items-center justify-between p-4 max-w-5xl mx-auto">
    <div class="font-semibold text-xl tracking-tight text-[#1d1d1f] dark:text-white transition-colors">
      <a href="/" class="hover:opacity-80 transition-opacity">Adrian Diaz Espinoza</a>
    </div>
    
    <div class="flex items-center space-x-4">
      <DarkModeToggle client:load />
      
      <!-- Mobile menu button -->
      <button id="menu-toggle" class="md:hidden p-2 text-[#86868b] dark:text-[#a1a1a6] rounded-full hover:bg-[#f5f5f7] dark:hover:bg-[#2d2d2f] transition-all duration-200">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M4 6h16M4 12h16M4 18h16" />
        </svg>
      </button>
    </div>
    
    <!-- Navigation links -->
    <ul id="menu" class="hidden md:flex md:space-x-6 w-full md:w-auto flex-col md:flex-row mt-4 md:mt-0 absolute md:static left-0 top-[100%] bg-white/95 dark:bg-[#1d1d1f]/95 md:bg-transparent p-6 md:p-0 shadow-lg md:shadow-none w-full transition-all duration-300 z-20 backdrop-blur-xl md:backdrop-blur-none" aria-label="Main navigation">
      {navItems.map(({ path, label }) => (
        <li>
          <a 
            href={path} 
            class={`relative block py-3 md:py-2 px-4 md:px-3 transition-all duration-200 ${
              pathname === path 
                ? 'text-[#0071e3] font-medium' 
                : 'text-[#424245] dark:text-[#a1a1a6] hover:text-[#0071e3] dark:hover:text-white'
            }`}
          >
            {label}
            {pathname === path && (
              <span class="absolute bottom-0 left-1/2 transform -translate-x-1/2 w-12 h-[2px] bg-[#0071e3] rounded-full md:block hidden"></span>
            )}
          </a>
        </li>
      ))}
    </ul>
  </nav>
</header>

<script>
  // Mobile menu functionality
  document.addEventListener('DOMContentLoaded', () => {
    const menuToggle = document.getElementById('menu-toggle');
    const menu = document.getElementById('menu');
    
    if (!menuToggle || !menu) return;
    
    // Toggle mobile menu
    menuToggle.addEventListener('click', () => {
      menu.classList.toggle('hidden');
      
      // Add animation classes
      if (!menu.classList.contains('hidden')) {
        menu.style.opacity = '0';
        menu.style.transform = 'translateY(-10px)';
        
        // Force a reflow
        void menu.offsetWidth;
        
        // Apply transitions
        menu.style.opacity = '1';
        menu.style.transform = 'translateY(0)';
      }
    });
    
    // Close menu when clicking outside
    document.addEventListener('click', (event) => {
      if (!menu.classList.contains('hidden') && 
          !menu.contains(event.target as Node) && 
          !menuToggle.contains(event.target as Node)) {
        menu.classList.add('hidden');
      }
    });
    
    // Handle window resize
    window.addEventListener('resize', () => {
      if (window.innerWidth >= 768) {
        menu.classList.remove('hidden');
      } else if (!menuToggle.classList.contains('active')) {
        menu.classList.add('hidden');
      }
    });
  });
</script>

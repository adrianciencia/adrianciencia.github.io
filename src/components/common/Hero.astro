---
interface Props {
  title: string;
  subtitle?: string;
  backgroundType?: 'minimal' | 'gradient' | 'image' | 'profile';
  image?: string;
  profileImage?: string;
  location?: string;
  socialLinks?: {icon: string, url: string}[];
}

const { 
  title, 
  subtitle, 
  backgroundType = 'minimal',
  image,
  profileImage,
  location,
  socialLinks = []
} = Astro.props;

// Background classes based on type
let bgClasses = '';
if (backgroundType === 'minimal') {
  bgClasses = 'bg-white dark:bg-black';
} else if (backgroundType === 'gradient') {
  bgClasses = 'bg-gradient-to-br from-[var(--apple-blue-light)] to-[var(--apple-blue-dark)] text-white';
} else if (backgroundType === 'image' && image) {
  bgClasses = 'relative bg-cover bg-center';
} else if (backgroundType === 'profile') {
  bgClasses = 'bg-white dark:bg-black';
}
---

{backgroundType === 'profile' ? (
  <section class="relative">
    <!-- Header image -->
    {image && (
      <div class="w-full h-48 md:h-64 overflow-hidden">
        <img src={image} alt="Header background" class="w-full h-full object-cover grayscale" />
      </div>
    )}
    
    <!-- Profile content -->
    <div class="max-w-5xl mx-auto px-4 md:px-6 relative">
      <!-- Profile image -->
      {profileImage && (
        <div class="absolute left-1/2 transform -translate-x-1/2 -translate-y-1/2">
          <img src={profileImage} alt={title} class="w-16 h-16 rounded-full border-4 border-white" />
        </div>
      )}
      
      <div class="text-center pt-12">
        <h1 class="text-5xl md:text-5xl font-bold tracking-tight mb-0 font-medium text-[var(--apple-gray-900)] dark:text-white">
          {title}
        </h1>
        
        {subtitle && (
          <p class="text-lg md:text-xl max-w-xl mx-auto mb-3 font-medium text-[var(--apple-gray-700)] dark:text-[var(--apple-gray-300)]">
            {subtitle}
          </p>
        )}
        
        {location && (
          <div class="flex justify-center items-center mb-3">   
            <span class="inline-flex items-center text-md text-[var(--apple-gray-600)] dark:text-[var(--apple-gray-400)]">
              üìç {location}
            </span>
          </div>
        )}
        
        {socialLinks.length > 0 && (
          <div class="flex justify-center items-center gap-0 mb-1">
            {socialLinks.map(link => (
              <a 
                href={link.url} 
                class="inline-flex justify-center items-center w-10 h-10 text-[var(--apple-gray-600)] hover:text-[var(--apple-gray-900)] dark:text-[var(--apple-gray-400)] dark:hover:text-white transition-colors" 
                target="_blank" 
                rel="noopener noreferrer"
              >
                <Fragment set:html={link.icon} />
              </a>
            ))}
          </div>
        )}
        
        <div class="flex flex-wrap justify-center gap-4 mb-8">
          <slot />
        </div>
      </div>
    </div>
  </section>
) : (
  <section class={`py-24 md:py-32 ${bgClasses}`} style={backgroundType === 'image' && image ? `background-image: url(${image})` : ''}>
    {backgroundType === 'image' && (
      <div class="absolute inset-0 bg-black/40"></div>
    )}
    
    <div class="max-w-5xl mx-auto px-4 md:px-6 relative">
      <div class="text-center">
        <h1 class={`text-4xl md:text-5xl lg:text-6xl font-bold tracking-tight mb-6 ${backgroundType === 'image' ? 'text-white' : 'text-[var(--apple-gray-900)] dark:text-white'}`}>
          {title}
        </h1>
        
        {subtitle && (
          <p class={`text-xl md:text-2xl max-w-3xl mx-auto mb-8 ${backgroundType === 'image' ? 'text-white/90' : 'text-[var(--apple-gray-600)] dark:text-[var(--apple-gray-300)]'}`}>
            {subtitle}
          </p>
        )}
        
        <slot />
      </div>
    </div>
  </section>
)}
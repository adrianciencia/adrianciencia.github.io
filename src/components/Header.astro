---
// Get the current path to highlight the active link
const { pathname } = Astro.url;

// Define all navigation items
const navItems = [
  { path: '/', label: 'Home' },
  { path: '/about', label: 'About' },
  { path: '/projects', label: 'Projects' },
  { path: '/research', label: 'Research' },
  { path: '/blog', label: 'Blog' },
];

import DarkModeToggle from './DarkModeToggle.svelte';
---

<header class="sticky top-0 z-50 backdrop-blur-lg bg-white/80 dark:bg-[var(--apple-gray-900)]/80 border-b border-gray-200 dark:border-gray-800">
  <nav class="flex flex-wrap items-center justify-between p-4 max-w-7xl mx-auto">
    <div class="font-semibold text-xl tracking-tight dark:text-white">MySite</div>
    
    <div class="flex items-center space-x-4">
      <DarkModeToggle client:load />
      
      <!-- Mobile menu button -->
      <button id="menu-toggle" class="md:hidden p-2 text-gray-600 dark:text-gray-300 rounded-full hover:bg-gray-100 dark:hover:bg-gray-800 transition-colors">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M4 6h16M4 12h16M4 18h16" />
        </svg>
      </button>
    </div>
    
    <!-- Navigation links -->
    <ul id="menu" class="hidden md:flex md:space-x-8 w-full md:w-auto flex-col md:flex-row mt-4 md:mt-0 absolute md:static left-0 top-[100%] bg-white/95 dark:bg-[var(--apple-gray-900)]/95 md:bg-transparent p-6 md:p-0 shadow-lg md:shadow-none w-full transition-all duration-300 z-20 backdrop-blur-lg md:backdrop-blur-none" aria-label="Main navigation">
      {navItems.map(({ path, label }) => (
        <li>
          <a 
            href={path} 
            class={`relative block py-3 md:py-2 px-4 md:px-3 rounded-full transition-colors ${
              pathname === path 
                ? 'text-[var(--apple-blue)] font-medium' 
                : 'text-[var(--apple-gray-600)] dark:text-[var(--apple-gray-300)] hover:text-[var(--apple-gray-900)] dark:hover:text-white'
            }`}
          >
            {label}
            {pathname === path && (
              <span class="absolute bottom-0 left-1/2 transform -translate-x-1/2 w-1 h-1 bg-[var(--apple-blue)] rounded-full md:block hidden"></span>
            )}
          </a>
        </li>
      ))}
    </ul>
  </nav>
</header>

<script>
  // Wait for the DOM to be fully loaded
  document.addEventListener('DOMContentLoaded', () => {
    const menuToggle = document.getElementById('menu-toggle');
    const menu = document.getElementById('menu');
    
    // Toggle mobile menu with proper event handling
    menuToggle?.addEventListener('click', (event) => {
      event.stopPropagation(); // Prevent the event from bubbling up
      menu?.classList.toggle('hidden');
      
      // Add a subtle animation
      if (menu?.classList.contains('hidden')) {
        menu.style.opacity = '0';
        menu.style.transform = 'translateY(-10px)';
      } else {
        menu.style.opacity = '1';
        menu.style.transform = 'translateY(0)';
        menu.classList.remove('hidden');
      }
    });

    // Close menu when clicking outside
    document.addEventListener('click', (event) => {
      const target = event.target;
      
      // Check if the click is outside the menu and toggle button
      if (menu && 
          menuToggle && 
          !menu.contains(target) && 
          !menuToggle.contains(target) && 
          !menu.classList.contains('hidden')) {
        menu.style.opacity = '0';
        menu.style.transform = 'translateY(-10px)';
        setTimeout(() => {
          menu.classList.add('hidden');
        }, 200);
      }
    });

    // Close menu when window is resized to desktop
    window.addEventListener('resize', () => {
      if (menu && window.innerWidth >= 768) {
        menu.classList.remove('hidden');
        menu.style.opacity = '1';
        menu.style.transform = 'translateY(0)';
      }
    });
  });
</script>

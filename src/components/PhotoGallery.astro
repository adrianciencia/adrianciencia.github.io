---
interface Photo {
  // Align with data structure
  slug: string;
  src: string;
  alt: string;
  caption: string;
  date?: string;
  location?: string;
  category: string;
  featured?: boolean;
}

interface Props {
  photos: Photo[];
  masonry?: boolean;
}

const { photos, masonry = false } = Astro.props;

// Import formatCategory function
import { formatCategory } from '../data/photos';

// Simplify slug creation
const categoryToSlug = (category: string) => category.toLowerCase();
const captionToSlug = (caption: string) => caption.toLowerCase().replace(/[^\w\s-]/g, '').replace(/\s+/g, '-');
---

<div class={`photo-gallery grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6 ${masonry ? 'masonry' : ''}`}>
  {photos.map((photo) => (
    <div class="photo-item mb-6 group">
      <a href={`/photography/${photo.slug}`} class="block relative overflow-hidden rounded-xl">
        <div class="aspect-[4/3] bg-gray-100 dark:bg-gray-800">
          <img 
            src={photo.src} 
            alt={photo.alt}
            class="w-full h-full object-cover"
          />
        </div>
        <div class="absolute inset-0 bg-gradient-to-t from-black/70 via-black/20 to-transparent flex flex-col justify-end p-6">
          <h3 class="text-white font-medium">{photo.caption}</h3>
          <p class="text-white/80 text-sm">{formatCategory(photo.category)}</p>
        </div>
      </a>
    </div>
  ))}
</div>

<style>
  .masonry {
    column-count: 1;
    column-gap: 1.5rem;
  }
  
  @media (min-width: 640px) {
    .masonry {
      column-count: 2;
    }
  }
  
  @media (min-width: 1024px) {
    .masonry {
      column-count: 3;
    }
  }
  
  .masonry .photo-item {
    break-inside: avoid;
    display: inline-block;
    width: 100%;
  }
  
  /* Ensure consistent aspect ratio */
  .photo-item a {
    display: block;
    position: relative;
  }
</style>
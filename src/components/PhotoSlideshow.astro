---
interface Photo {
  src: string;
  alt: string;
  caption?: string;
}

interface Props {
  photos: Photo[];
  autoplay?: boolean;
  interval?: number;
  height?: string;
}

const { 
  photos, 
  autoplay = true, 
  interval = 5000,
  height = '70vh'
} = Astro.props;

const uniqueId = `slideshow-${Math.random().toString(36).slice(2, 9)}`;
---

<div class="photo-slideshow relative overflow-hidden rounded-2xl" id={uniqueId} style={`height: ${height}; min-height: 400px;`}>
  <div class="slides-container absolute inset-0">
    {photos.map((photo, index) => (
      <div class={`slide absolute inset-0 transition-opacity duration-1000 ${index === 0 ? 'opacity-100' : 'opacity-0'}`} data-index={index}>
        <img 
          src={photo.src} 
          alt={photo.alt} 
          class="w-full h-full object-cover pointer-events-none"
        />
        <div class="absolute inset-0 bg-gradient-to-t from-black/60 to-transparent"></div>
        {photo.caption && (
          <div class="absolute bottom-0 left-0 right-0 p-6">
            <h3 class="text-white text-xl md:text-2xl font-medium">{photo.caption}</h3>
          </div>
        )}
      </div>
    ))}
  </div>

  <!-- Navigation controls -->
  <button class="nav-arrow prev absolute left-4 top-1/2 -translate-y-1/2 bg-white/20 backdrop-blur-md rounded-full p-2 opacity-0 transition-opacity duration-300 hover:bg-white/30" style="z-index: 20">
    <svg class="w-6 h-6 text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"/>
    </svg>
  </button>
  
  <button class="nav-arrow next absolute right-4 top-1/2 -translate-y-1/2 bg-white/20 backdrop-blur-md rounded-full p-2 opacity-0 transition-opacity duration-300 hover:bg-white/30" style="z-index: 20">
    <svg class="w-6 h-6 text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"/>
    </svg>
  </button>

  <!-- Indicators -->
  <div class="indicators absolute bottom-4 left-1/2 -translate-x-1/2 flex gap-2" style="z-index: 20">
    {photos.map((_, index) => (
      <button 
        class="indicator w-2 h-2 rounded-full bg-white/50 transition-all duration-300"
        data-index={index}
        aria-label={`Go to slide ${index + 1}`}
      ></button>
    ))}
  </div>
</div>

<style>
  .photo-slideshow {
    isolation: isolate;
  }
  
  .photo-slideshow:hover .nav-arrow {
    opacity: 1;
  }
  
  .indicator.active {
    @apply bg-white w-4;
  }
</style>

<script define:vars={{ uniqueId, autoplay, interval, totalSlides: photos.length }}>
  document.addEventListener('DOMContentLoaded', () => {
    const slideshow = document.getElementById(uniqueId);
    if (!slideshow || totalSlides < 1) return;

    const getElements = () => ({
      slides: slideshow.querySelectorAll('.slide'),
      prevButton: slideshow.querySelector('.nav-arrow.prev'),
      nextButton: slideshow.querySelector('.nav-arrow.next'),
      indicators: slideshow.querySelectorAll('.indicator')
    });

    let currentIndex = 0;
    let intervalId = null;
    const { slides, prevButton, nextButton, indicators } = getElements();

    const showSlide = (index) => {
      slides.forEach((slide, i) => 
        slide.classList.toggle('opacity-100', i === index)
      );
      
      indicators.forEach((indicator, i) => 
        indicator.classList.toggle('active', i === index)
      );
      
      currentIndex = index;
    };

    const navigate = (direction) => {
      const newIndex = (currentIndex + direction + totalSlides) % totalSlides;
      showSlide(newIndex);
    };

    const startAutoplay = () => {
      if (autoplay && totalSlides > 1) {
        intervalId = setInterval(() => navigate(1), interval);
      }
    };

    const stopAutoplay = () => {
      clearInterval(intervalId);
      intervalId = null;
    };

    // Event handlers
    const handleControl = (direction) => {
      stopAutoplay();
      navigate(direction);
      startAutoplay();
    };

    prevButton?.addEventListener('click', () => handleControl(-1));
    nextButton?.addEventListener('click', () => handleControl(1));
    
    indicators.forEach((indicator, index) => {
      indicator.addEventListener('click', () => {
        stopAutoplay();
        showSlide(index);
        startAutoplay();
      });
    });

    // Touch/swipe handling
    let touchStartX = 0;
    const handleTouch = (e) => {
      const touchEndX = e.changedTouches[0].screenX;
      if (Math.abs(touchEndX - touchStartX) > 50) {
        handleControl(touchEndX < touchStartX ? 1 : -1);
      }
    };

    slideshow.addEventListener('touchstart', e => touchStartX = e.touches[0].screenX);
    slideshow.addEventListener('touchend', handleTouch);

    // Keyboard navigation
    document.addEventListener('keydown', (e) => {
      if (['ArrowLeft', 'ArrowRight'].includes(e.key)) {
        handleControl(e.key === 'ArrowLeft' ? -1 : 1);
      }
    });

    // Initialize
    showSlide(0);
    startAutoplay();
    slideshow.addEventListener('mouseenter', stopAutoplay);
    slideshow.addEventListener('mouseleave', startAutoplay);
  });
</script>